<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(Core)\UncommonSense.CBreeze.Core.dll" #>
<#@ assembly name="$(Core)\UncommonSense.CBreeze.Common.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="UncommonSense.CBreeze.Core"#>
<#@ import namespace="UncommonSense.CBreeze.Core.Code.Parameter"#>
<#@ output extension=".cs" #>
<#
	var types = AppDomain
		.CurrentDomain
		.GetAssemblies()
		.SelectMany(a => a.GetTypes())
		.Where(t => typeof(Parameter).IsAssignableFrom(t))
		.Where(t => typeof(Parameter) != t); 

	var typesWithIntegerSubType = new List<string>() { "RecordParameter",  "PageParameter", "ReportParameter", "CodeunitParameter", "TestPageParameter", "TestRequestPageParameter", "QueryParameter", "XmlPortParameter" };
	var typesWithStringSubType = new List<string>() { "AutomationParameter", "OcxParameter", "DotNetParameter" };
	var typesWithDataLength = new List<string>() { "TextParameter", "CodeParameter", "BinaryParameter" };
	var typesWithMandatoryDataLength = new List<string>() { "BinaryParameter" };
	var typesWithRecordSecurityFiltering = new List<string>() { "RecordParameter", "RecordRefParameter" };
	var typesWithQuerySecurityFiltering = new List<string>() { "QueryParameter" };
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Management.Automation;
using UncommonSense.CBreeze.Core;
using UncommonSense.CBreeze.Core.Code.Parameter;
using UncommonSense.CBreeze.Core.Property.Enumeration;
using UncommonSense.CBreeze.Core.Query;

namespace UncommonSense.CBreeze.Automation 
{
<#
	foreach(var @type in types) 
	{
		var variableName = Char.ToLowerInvariant(@type.Name[0]) + @type.Name.Substring(1);
		var hasIntegerSubType = typesWithIntegerSubType.Contains(@type.Name);
		var hasStringSubType = typesWithStringSubType.Contains(@type.Name);
		var hasSubType = hasIntegerSubType || hasStringSubType;
		var hasDataLength = typesWithDataLength.Contains(@type.Name);
		var dataLengthMandatory = typesWithMandatoryDataLength.Contains(@type.Name);
		var hasOptionString = (@type.Name == "OptionParameter");
		var hasTemporary = (@type.Name == "RecordParameter");
		var hasRecordSecurityFiltering = typesWithRecordSecurityFiltering.Contains(@type.Name);
		var hasQuerySecurityFiltering = typesWithQuerySecurityFiltering.Contains(@type.Name);
		var hasSecurityFiltering = hasRecordSecurityFiltering || hasQuerySecurityFiltering;
		var hasRunOnClient = (@type.Name == "DotNetParameter");
		var hasSuppressDispose = (@type.Name == "DotNetParameter");
#>
[Cmdlet(VerbsCommon.New, "CBreeze<#=@type.Name#>", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
[OutputType(typeof(<#=type.Name#>))]
[Alias("<#=type.Name#>", "Add-CBreeze<#=type.Name#>")]
public class NewCBreeze<#=@type.Name#> : NewItemWithIDAndNameCmdlet<<#=@type.Name#>, int, PSObject>
{
protected override IEnumerable<<#=@type.Name#>> CreateItems()
	{
		var <#= variableName #> = new <#= @type.Name #>(Name<# if (hasSubType) { #>, SubType<# } #>, Var, ID<# if (hasDataLength) { #>, DataLength<# } #>);
		<#= variableName #>.Dimensions = Dimensions;
<# if (hasOptionString)      { #>		<#= variableName #>.OptionString = OptionString; <# } #>
<# if (hasSecurityFiltering) { #>		<#= variableName #>.SecurityFiltering = SecurityFiltering; <# } #>
<# if (hasTemporary)         { #>		<#= variableName #>.Temporary = NullableBooleanFromSwitch(nameof(Temporary)); <# } #>
<# if (hasRunOnClient)       { #>		<#= variableName #>.RunOnClient = NullableBooleanFromSwitch(nameof(RunOnClient)); <# } #>
<# if (hasSuppressDispose)   { #>		<#= variableName #>.SuppressDispose = NullableBooleanFromSwitch(nameof(SuppressDispose)); <# } #>
		yield return <#= variableName #>;
	}

	protected override void AddItemToInputObject(<#= @type.Name #> item, PSObject inputObject)
	{
		inputObject.GetParameters().Add(item);	
	}

<# if (hasDataLength) { #>
	[Parameter(Mandatory=<#=dataLengthMandatory.ToString().ToLowerInvariant()#>, Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
	[Parameter(Mandatory=<#=dataLengthMandatory.ToString().ToLowerInvariant()#>, Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
	[Parameter(Mandatory=<#=dataLengthMandatory.ToString().ToLowerInvariant()#>, Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
	[Parameter(Mandatory=<#=dataLengthMandatory.ToString().ToLowerInvariant()#>, Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
	[ValidateRange(1, int.MaxValue)]
	public int? DataLength { get; set; }
<# } #>

	[Parameter()]
	public SwitchParameter Var { get; set; }

	[Parameter()]
	public string Dimensions { get; set; }
<# if (hasOptionString) { #>

	[Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
	[Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
	[Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
	[Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
	public string OptionString { get;set; } 
<# } #>
<# if (hasRecordSecurityFiltering) { #>

	[Parameter()]
	public RecordSecurityFiltering? SecurityFiltering { get; set; }
<# } #>
<# if (hasQuerySecurityFiltering) { #>

	[Parameter()]
	public QuerySecurityFiltering? SecurityFiltering { get; set; }
<# } #>
<# if (hasRunOnClient) { #>

	[Parameter()]
	public SwitchParameter RunOnClient { get; set; }
<# } #>
<# if (hasIntegerSubType) { #>

	[Parameter(Mandatory=true, Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
	[Parameter(Mandatory=true, Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
	[Parameter(Mandatory=true, Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
	[Parameter(Mandatory=true, Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
	[ValidateRange(1, int.MaxValue)]
	public int SubType { get; set; }
<# } #>
<# if (hasStringSubType) { #>

	[Parameter(Mandatory=true, Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
	[Parameter(Mandatory=true, Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
	[Parameter(Mandatory=true, Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
	[Parameter(Mandatory=true, Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
	public string SubType { get; set; }
<# } #>
<# if (hasSuppressDispose) { #>

	[Parameter()]
	public SwitchParameter SuppressDispose { get; set; } 
<# } #>
<# if (hasTemporary) { #>

	[Parameter()]
	public SwitchParameter Temporary { get; set; }
<# } #>
}

<#		
	}
#>
}
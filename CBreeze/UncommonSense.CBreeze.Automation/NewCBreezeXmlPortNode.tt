<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(Core)\UncommonSense.CBreeze.Core.dll" #>
<#@ assembly name="$(Core)\UncommonSense.CBreeze.Common.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="UncommonSense.CBreeze.Core" #>
<#@ import namespace="UncommonSense.CBreeze.Core.XmlPort" #>
<#@ import namespace="UncommonSense.CBreeze.Core.Code.Variable" #>
<#@ import namespace="UncommonSense.CBreeze.Core.Property.Implementation" #>

<#@ output extension=".cs" #>
<#
	var types = AppDomain
		.CurrentDomain
		.GetAssemblies()
		.SelectMany(a => a.GetTypes())
		.Where(t => typeof(XmlPortNode).IsAssignableFrom(t))
		.Where(t => typeof(XmlPortNode) != t); 

	var skipProperties = new List<string>() { 
		"Item",
		"WithAValue", 
		"ChildNodes",
		"ParentNode",
		"XmlPortFieldAttribute",
		"XmlPortFieldElement",
		"XmlPortTableAttribute",
		"XmlPortTableElement",
		"XmlPortTextElement",
		"XmlPortTextAttribute",
		"ReqFilterHeadingML",
		"LinkFields"
	};

	var mandatoryProperties = new List<string>() {
		"SourceTable"
	};

	var positionOffset = new Dictionary<string, int>() {
		{ "SourceTable", 1 },
		{ "SourceFieldTableVariableName", 1 },
		{ "SourceFieldName", 2 }
	};

	var rangeMin = new Dictionary<string, string>() {
		{ "SourceTable", "1" }
	};

	var rangeMax = new Dictionary<string, string>() {
		{ "SourceTable", "int.MaxValue" }
	};
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Reflection;
using System.Collections.Generic;
using System.Management.Automation;
using UncommonSense.CBreeze.Common;
using UncommonSense.CBreeze.Core;
using UncommonSense.CBreeze.Core.XmlPort;
using UncommonSense.CBreeze.Core.Property.Enumeration;
using UncommonSense.CBreeze.Core.Property.Type;
using UncommonSense.CBreeze.Core.Table.Field;
using UncommonSense.CBreeze.Core.Property.Implementation;

namespace UncommonSense.CBreeze.Automation 
{
<# 
foreach (var @type in types) { 
	var variableName = Char.ToLowerInvariant(@type.Name[0]) + @type.Name.Substring(1);
	var propertiesClass = @type.GetProperty("Properties").PropertyType;
	var relevantProperties = propertiesClass
		.GetProperties()
		//.Where(p => p.PropertyType != typeof(Trigger))
		.Where(p => !skipProperties.Contains(p.Name))
		.Select(p => new {
			Name = p.Name,
			Type = (p.PropertyType == typeof(FieldList) ? "string[]" : GetFullTypeName(p.PropertyType)),
			Mandatory = mandatoryProperties.Contains(p.Name),
			PositionOffset = positionOffset.ContainsKey(p.Name) ? positionOffset[p.Name] : 0,
			Assignment = $"{variableName}.Properties.{p.Name}{GetAssignment(p)};",
			RangeMin = (rangeMin.ContainsKey(p.Name) ? rangeMin[p.Name] : null),
			RangeMax = (rangeMax.ContainsKey(p.Name) ? rangeMax[p.Name] : null)
		});

	if (relevantProperties.Any(p => p.Name == "SourceField"))
	{
		var newProperties = new[] {
			new {
				Name = "SourceFieldTableVariableName",
				Type = "string",
				Mandatory = true,
				PositionOffset = 1,
				Assignment = $"{variableName}.Properties.SourceField.TableVariableName = SourceFieldTableVariableName;",
				RangeMin = string.Empty,
				RangeMax = string.Empty
			},
			new {
				Name = "SourceFieldName",
				Type = "string",
				Mandatory = true,
				PositionOffset = 2,
				Assignment = $"{variableName}.Properties.SourceField.FieldName = SourceFieldName;",
				RangeMin = string.Empty,
				RangeMax = string.Empty
			}
		};

		relevantProperties = 
			relevantProperties
				.Where(p => p.Name != "SourceField")
				.Concat(newProperties);
	}

	if (relevantProperties.Any(p => p.Name == "SourceTableView"))
	{
		var newProperties = new [] {
			new {
				Name = "SourceTableViewKey",
				Type = "string",
				Mandatory = false,
				PositionOffset = 0,
				Assignment = $"{variableName}.Properties.SourceTableView.Key = SourceTableViewKey;",
				RangeMin = string.Empty,
				RangeMax = string.Empty
			},
			new {
				Name = "SourceTableViewOrder",
				Type = "Order?",
				Mandatory = false, 
				PositionOffset = 0,
				Assignment = $"{variableName}.Properties.SourceTableView.Order = SourceTableViewOrder;",
				RangeMin = string.Empty,
				RangeMax = string.Empty
			}
		};

		relevantProperties = 
			relevantProperties
				.Where(p => p.Name != "SourceTableView")
				.Concat(newProperties);
	}

	relevantProperties = relevantProperties.OrderBy(p => p.Name);
#>
	[Cmdlet(VerbsCommon.New, "CBreeze<#= @type.Name #>", DefaultParameterSetName=ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(XmlPortNode))]
	[Alias("<#= @type.Name.Replace("XmlPort", "") #>")]
	public class NewCBreeze<#=@type.Name#> : NewItemWithIDAndNameCmdlet<XmlPortNode, Guid, PSObject>
	{
		protected override IEnumerable<XmlPortNode> CreateItems()
		{
			var <#=variableName#> = new <#=@type.Name#>(Name, GetIndentation(), ID);

<# foreach(var property in relevantProperties) { #>
			<#= property.Assignment #>
<# } #>

			yield return <#=variableName#>;

			if (ChildNodes != null)
			{
                var variables = new List<PSVariable>() { new PSVariable("NodeIndentation", GetIndentation() + 1) };
				var childNodes = ChildNodes.InvokeWithContext(null, variables).Select(c => c.BaseObject);

<# if (@type.Name.Contains("Table")) { #>
				<#= variableName #>.Properties.LinkFields.AddRange(childNodes.OfType<LinkField>());				
				<#= variableName #>.Properties.SourceTableView.TableFilter.AddRange(childNodes.OfType<TableFilterLine>());				

<# } #>				
				foreach(var childNode in childNodes.OfType<XmlPortNode>())
				{
					yield return childNode;
				}
			}
		}

		protected override void AddItemToInputObject(XmlPortNode item, PSObject inputObject)
		{
			switch(inputObject.BaseObject)
			{
				case XmlPort x when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.FirstWithinContainer:
					(InputObject.BaseObject as XmlPort).Nodes.Insert(0, item); 
					break;

				case XmlPort x when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.LastWithinContainer:
					(InputObject.BaseObject as XmlPort).Nodes.Add(item); 
					break;

				case XmlPortNodes n when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.FirstWithinContainer:
					(InputObject.BaseObject as XmlPortNodes).Insert(0, item); 
					break;

				case XmlPortNodes n when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.LastWithinContainer:
					(InputObject.BaseObject as XmlPortNodes).Add(item); 
					break;

				case XmlPortNode n:
					(InputObject.BaseObject as XmlPortNode).AddChildNode(item, Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer));
					break;

				default:
					base.AddItemToInputObject(item, inputObject);
					break;
			}
		}

		protected int GetIndentation()
		{
			switch(ParameterSetName)
			{
				case ParameterSetNames.AddWithID:
				case ParameterSetNames.AddWithoutID:
					if (InputObject.BaseObject is XmlPort) { return 0; }
					if (InputObject.BaseObject is XmlPortNodes) { return 0; } 
					if (InputObject.BaseObject is XmlPortNode) { return (InputObject.BaseObject as XmlPortNode).IndentationLevel.GetValueOrDefault(0) + 1; };
	                throw new ArgumentOutOfRangeException("Cannot determine indentation.");
					
				case ParameterSetNames.NewWithID:
				case ParameterSetNames.NewWithoutID:
					return (int)GetVariableValue("NodeIndentation", 0);

				default: 
					return 0;
			}
		}

		[Parameter()]
		public Position? Position { get; set; }
		
<# foreach(var property in relevantProperties) { #>
<# if (property.PositionOffset == 0) { #>
		[Parameter(<# if (property.Mandatory) { #>Mandatory = true<# } #>)]
<# } else { #>
		[Parameter(<# if (property.Mandatory) { #>Mandatory = true<# } #>, Position = <#= 1 + property.PositionOffset #>, ParameterSetName=ParameterSetNames.NewWithoutID)]
		[Parameter(<# if (property.Mandatory) { #>Mandatory = true<# } #>, Position = <#= 2 + property.PositionOffset #>, ParameterSetName=ParameterSetNames.NewWithID)]
		[Parameter(<# if (property.Mandatory) { #>Mandatory = true<# } #>, Position = <#= 1 + property.PositionOffset #>, ParameterSetName=ParameterSetNames.AddWithoutID)]
		[Parameter(<# if (property.Mandatory) { #>Mandatory = true<# } #>, Position = <#= 2 + property.PositionOffset #>, ParameterSetName=ParameterSetNames.AddWithID)]		
<# } #>
<# if ((!string.IsNullOrEmpty(property.RangeMin)) || (!string.IsNullOrEmpty(property.RangeMax))) { #>
		[ValidateRange(<#= property.RangeMin #>, <#= property.RangeMax #>)]
<# } #>
		public <#= property.Type #> <#= property.Name #> { get; set; }

<# } #>
<# var positionalProperties = relevantProperties.Where(p => positionOffset.ContainsKey(p.Name)).Count(); #>
        [Parameter(Position = <#= 2 + positionalProperties #>, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = <#= 2 + positionalProperties #>, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = <#= 3 + positionalProperties #>, ParameterSetName = ParameterSetNames.AddWithID)]
        [Parameter(Position = <#= 3 + positionalProperties #>, ParameterSetName = ParameterSetNames.NewWithID)]
		public ScriptBlock ChildNodes { get; set; }
	}

<# } #>
}
<#+
	static string GetFullTypeName(Type t)
	{
		if (t == typeof(Trigger))
			return "ScriptBlock";

		if (!t.IsGenericType)
			return t.Name;

		if (t == typeof(FieldList))
			return "string[]";

		if (t == typeof(bool?))
			return "SwitchParameter";

		var stringBuilder = new StringBuilder();

		stringBuilder.Append(t.Name.Substring(0, t.Name.LastIndexOf("`")));
		stringBuilder.Append("<");
		stringBuilder.Append(string.Join(",", t.GetGenericArguments().Select(a => GetFullTypeName(a))));
		stringBuilder.Append(">");

		return stringBuilder.ToString();
	}

	static string GetAssignment(PropertyInfo propertyInfo)
	{
		switch(propertyInfo)
        {
			case PropertyInfo p when p.PropertyType == typeof(Trigger): return $".Set({p.Name})";
			case PropertyInfo p when p.PropertyType == typeof(FieldList): return $".AddRange({p.Name})";
			case PropertyInfo p when p.PropertyType == typeof(bool?): return $" = NullableBooleanFromSwitch(nameof({p.Name}))";
			default: return $" = {propertyInfo.Name}";
 		}
	}
#>